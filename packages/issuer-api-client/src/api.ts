// tslint:disable
/**
 * Issuer API
 * Swagger documentation for the Issuer API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BulkClaimCertificatesDTO
 */
export interface BulkClaimCertificatesDTO {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkClaimCertificatesDTO
     */
    certificateIds: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof BulkClaimCertificatesDTO
     */
    claimData: object;
}
/**
 * 
 * @export
 * @interface ClaimCertificateDTO
 */
export interface ClaimCertificateDTO {
    /**
     * 
     * @type {object}
     * @memberof ClaimCertificateDTO
     */
    claimData: object;
    /**
     * 
     * @type {string}
     * @memberof ClaimCertificateDTO
     */
    amount?: string;
}
/**
 * 
 * @export
 * @interface DelegatedTransferOptions
 */
export interface DelegatedTransferOptions {
    /**
     * 
     * @type {string}
     * @memberof DelegatedTransferOptions
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof DelegatedTransferOptions
     */
    signature: string;
}
/**
 * 
 * @export
 * @interface ICertificateDTO
 */
export interface ICertificateDTO {
    /**
     * 
     * @type {number}
     * @memberof ICertificateDTO
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ICertificateDTO
     */
    tokenId: number;
    /**
     * 
     * @type {string}
     * @memberof ICertificateDTO
     */
    deviceId: string;
    /**
     * 
     * @type {number}
     * @memberof ICertificateDTO
     */
    generationStartTime: number;
    /**
     * 
     * @type {number}
     * @memberof ICertificateDTO
     */
    generationEndTime: number;
    /**
     * 
     * @type {number}
     * @memberof ICertificateDTO
     */
    creationTime: number;
    /**
     * 
     * @type {string}
     * @memberof ICertificateDTO
     */
    creationBlockHash: string;
    /**
     * 
     * @type {object}
     * @memberof ICertificateDTO
     */
    energy: object;
    /**
     * 
     * @type {boolean}
     * @memberof ICertificateDTO
     */
    isOwned: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ICertificateDTO
     */
    isClaimed: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ICertificateDTO
     */
    myClaims: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof ICertificateDTO
     */
    blockchain: object;
    /**
     * 
     * @type {object}
     * @memberof ICertificateDTO
     */
    latestCommitment: object;
    /**
     * 
     * @type {boolean}
     * @memberof ICertificateDTO
     */
    issuedPrivately: boolean;
}
/**
 * 
 * @export
 * @interface ICertificateEvent
 */
export interface ICertificateEvent {
    /**
     * 
     * @type {string}
     * @memberof ICertificateEvent
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ICertificateEvent
     */
    timestamp: number;
    /**
     * 
     * @type {object}
     * @memberof ICertificateEvent
     */
    values: object;
}
/**
 * 
 * @export
 * @interface ICertificationRequestDTO
 */
export interface ICertificationRequestDTO {
    /**
     * 
     * @type {number}
     * @memberof ICertificationRequestDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ICertificationRequestDTO
     */
    deviceId: string;
    /**
     * 
     * @type {string}
     * @memberof ICertificationRequestDTO
     */
    energy: string;
    /**
     * 
     * @type {string}
     * @memberof ICertificationRequestDTO
     */
    owner: string;
    /**
     * 
     * @type {number}
     * @memberof ICertificationRequestDTO
     */
    fromTime: number;
    /**
     * 
     * @type {number}
     * @memberof ICertificationRequestDTO
     */
    toTime: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ICertificationRequestDTO
     */
    files: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ICertificationRequestDTO
     */
    created: number;
    /**
     * 
     * @type {boolean}
     * @memberof ICertificationRequestDTO
     */
    approved: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ICertificationRequestDTO
     */
    revoked: boolean;
    /**
     * 
     * @type {number}
     * @memberof ICertificationRequestDTO
     */
    requestId: number;
    /**
     * 
     * @type {string}
     * @memberof ICertificationRequestDTO
     */
    approvedDate: string;
    /**
     * 
     * @type {string}
     * @memberof ICertificationRequestDTO
     */
    revokedDate: string;
    /**
     * 
     * @type {number}
     * @memberof ICertificationRequestDTO
     */
    issuedCertificateTokenId: number;
}
/**
 * 
 * @export
 * @interface ICreateCertificationRequestDTO
 */
export interface ICreateCertificationRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ICreateCertificationRequestDTO
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof ICreateCertificationRequestDTO
     */
    energy: string;
    /**
     * 
     * @type {number}
     * @memberof ICreateCertificationRequestDTO
     */
    fromTime: number;
    /**
     * 
     * @type {number}
     * @memberof ICreateCertificationRequestDTO
     */
    toTime: number;
    /**
     * 
     * @type {string}
     * @memberof ICreateCertificationRequestDTO
     */
    deviceId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ICreateCertificationRequestDTO
     */
    files?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ICreateCertificationRequestDTO
     */
    isPrivate: boolean;
}
/**
 * 
 * @export
 * @interface ISuccessResponseDTO
 */
export interface ISuccessResponseDTO {
    /**
     * 
     * @type {boolean}
     * @memberof ISuccessResponseDTO
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof ISuccessResponseDTO
     */
    message: string;
}
/**
 * 
 * @export
 * @interface IssueCertificateDTO
 */
export interface IssueCertificateDTO {
    /**
     * 
     * @type {string}
     * @memberof IssueCertificateDTO
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof IssueCertificateDTO
     */
    energy: string;
    /**
     * 
     * @type {number}
     * @memberof IssueCertificateDTO
     */
    fromTime: number;
    /**
     * 
     * @type {number}
     * @memberof IssueCertificateDTO
     */
    toTime: number;
    /**
     * 
     * @type {string}
     * @memberof IssueCertificateDTO
     */
    deviceId: string;
    /**
     * 
     * @type {boolean}
     * @memberof IssueCertificateDTO
     */
    isPrivate?: boolean;
}
/**
 * 
 * @export
 * @interface TransferCertificateDTO
 */
export interface TransferCertificateDTO {
    /**
     * 
     * @type {string}
     * @memberof TransferCertificateDTO
     */
    to: string;
    /**
     * 
     * @type {DelegatedTransferOptions}
     * @memberof TransferCertificateDTO
     */
    delegated?: DelegatedTransferOptions;
    /**
     * 
     * @type {string}
     * @memberof TransferCertificateDTO
     */
    amount?: string;
}

/**
 * CertificatesClient - axios parameter creator
 * @export
 */
export const CertificatesClientAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BulkClaimCertificatesDTO} bulkClaimCertificatesDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkClaim: async (bulkClaimCertificatesDTO: BulkClaimCertificatesDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkClaimCertificatesDTO' is not null or undefined
            if (bulkClaimCertificatesDTO === null || bulkClaimCertificatesDTO === undefined) {
                throw new RequiredError('bulkClaimCertificatesDTO','Required parameter bulkClaimCertificatesDTO was null or undefined when calling bulkClaim.');
            }
            const localVarPath = `/api/certificate/bulk-claim`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bulkClaimCertificatesDTO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bulkClaimCertificatesDTO !== undefined ? bulkClaimCertificatesDTO : {}) : (bulkClaimCertificatesDTO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ClaimCertificateDTO} claimCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        claim: async (id: number, claimCertificateDTO: ClaimCertificateDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling claim.');
            }
            // verify required parameter 'claimCertificateDTO' is not null or undefined
            if (claimCertificateDTO === null || claimCertificateDTO === undefined) {
                throw new RequiredError('claimCertificateDTO','Required parameter claimCertificateDTO was null or undefined when calling claim.');
            }
            const localVarPath = `/api/certificate/{id}/claim`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof claimCertificateDTO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(claimCertificateDTO !== undefined ? claimCertificateDTO : {}) : (claimCertificateDTO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/api/certificate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/certificate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEvents: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllEvents.');
            }
            const localVarPath = `/api/certificate/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTokenId: async (tokenId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenId' is not null or undefined
            if (tokenId === null || tokenId === undefined) {
                throw new RequiredError('tokenId','Required parameter tokenId was null or undefined when calling getByTokenId.');
            }
            const localVarPath = `/api/certificate/token-id/{tokenId}`
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IssueCertificateDTO} issueCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issue: async (issueCertificateDTO: IssueCertificateDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueCertificateDTO' is not null or undefined
            if (issueCertificateDTO === null || issueCertificateDTO === undefined) {
                throw new RequiredError('issueCertificateDTO','Required parameter issueCertificateDTO was null or undefined when calling issue.');
            }
            const localVarPath = `/api/certificate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof issueCertificateDTO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(issueCertificateDTO !== undefined ? issueCertificateDTO : {}) : (issueCertificateDTO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransferCertificateDTO} transferCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer: async (id: number, transferCertificateDTO: TransferCertificateDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling transfer.');
            }
            // verify required parameter 'transferCertificateDTO' is not null or undefined
            if (transferCertificateDTO === null || transferCertificateDTO === undefined) {
                throw new RequiredError('transferCertificateDTO','Required parameter transferCertificateDTO was null or undefined when calling transfer.');
            }
            const localVarPath = `/api/certificate/{id}/transfer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof transferCertificateDTO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transferCertificateDTO !== undefined ? transferCertificateDTO : {}) : (transferCertificateDTO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CertificatesClient - functional programming interface
 * @export
 */
export const CertificatesClientFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BulkClaimCertificatesDTO} bulkClaimCertificatesDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkClaim(bulkClaimCertificatesDTO: BulkClaimCertificatesDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISuccessResponseDTO>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).bulkClaim(bulkClaimCertificatesDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ClaimCertificateDTO} claimCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async claim(id: number, claimCertificateDTO: ClaimCertificateDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISuccessResponseDTO>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).claim(id, claimCertificateDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICertificateDTO>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).get(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ICertificateDTO>>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).getAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEvents(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ICertificateEvent>>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).getAllEvents(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByTokenId(tokenId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICertificateDTO>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).getByTokenId(tokenId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {IssueCertificateDTO} issueCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issue(issueCertificateDTO: IssueCertificateDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICertificateDTO>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).issue(issueCertificateDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TransferCertificateDTO} transferCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transfer(id: number, transferCertificateDTO: TransferCertificateDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISuccessResponseDTO>> {
            const localVarAxiosArgs = await CertificatesClientAxiosParamCreator(configuration).transfer(id, transferCertificateDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CertificatesClient - factory interface
 * @export
 */
export const CertificatesClientFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {BulkClaimCertificatesDTO} bulkClaimCertificatesDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkClaim(bulkClaimCertificatesDTO: BulkClaimCertificatesDTO, options?: any): AxiosPromise<ISuccessResponseDTO> {
            return CertificatesClientFp(configuration).bulkClaim(bulkClaimCertificatesDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ClaimCertificateDTO} claimCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        claim(id: number, claimCertificateDTO: ClaimCertificateDTO, options?: any): AxiosPromise<ISuccessResponseDTO> {
            return CertificatesClientFp(configuration).claim(id, claimCertificateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any): AxiosPromise<ICertificateDTO> {
            return CertificatesClientFp(configuration).get(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<ICertificateDTO>> {
            return CertificatesClientFp(configuration).getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEvents(id: number, options?: any): AxiosPromise<Array<ICertificateEvent>> {
            return CertificatesClientFp(configuration).getAllEvents(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} tokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByTokenId(tokenId: number, options?: any): AxiosPromise<ICertificateDTO> {
            return CertificatesClientFp(configuration).getByTokenId(tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IssueCertificateDTO} issueCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issue(issueCertificateDTO: IssueCertificateDTO, options?: any): AxiosPromise<ICertificateDTO> {
            return CertificatesClientFp(configuration).issue(issueCertificateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TransferCertificateDTO} transferCertificateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transfer(id: number, transferCertificateDTO: TransferCertificateDTO, options?: any): AxiosPromise<ISuccessResponseDTO> {
            return CertificatesClientFp(configuration).transfer(id, transferCertificateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CertificatesClient - object-oriented interface
 * @export
 * @class CertificatesClient
 * @extends {BaseAPI}
 */
export class CertificatesClient extends BaseAPI {
    /**
     * 
     * @param {BulkClaimCertificatesDTO} bulkClaimCertificatesDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public bulkClaim(bulkClaimCertificatesDTO: BulkClaimCertificatesDTO, options?: any) {
        return CertificatesClientFp(this.configuration).bulkClaim(bulkClaimCertificatesDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {ClaimCertificateDTO} claimCertificateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public claim(id: number, claimCertificateDTO: ClaimCertificateDTO, options?: any) {
        return CertificatesClientFp(this.configuration).claim(id, claimCertificateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public get(id: number, options?: any) {
        return CertificatesClientFp(this.configuration).get(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public getAll(options?: any) {
        return CertificatesClientFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public getAllEvents(id: number, options?: any) {
        return CertificatesClientFp(this.configuration).getAllEvents(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} tokenId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public getByTokenId(tokenId: number, options?: any) {
        return CertificatesClientFp(this.configuration).getByTokenId(tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IssueCertificateDTO} issueCertificateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public issue(issueCertificateDTO: IssueCertificateDTO, options?: any) {
        return CertificatesClientFp(this.configuration).issue(issueCertificateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TransferCertificateDTO} transferCertificateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificatesClient
     */
    public transfer(id: number, transferCertificateDTO: TransferCertificateDTO, options?: any) {
        return CertificatesClientFp(this.configuration).transfer(id, transferCertificateDTO, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * CertificationRequestsClient - axios parameter creator
 * @export
 */
export const CertificationRequestsClientAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling approve.');
            }
            const localVarPath = `/api/certification-request/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICreateCertificationRequestDTO} iCreateCertificationRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (iCreateCertificationRequestDTO: ICreateCertificationRequestDTO, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'iCreateCertificationRequestDTO' is not null or undefined
            if (iCreateCertificationRequestDTO === null || iCreateCertificationRequestDTO === undefined) {
                throw new RequiredError('iCreateCertificationRequestDTO','Required parameter iCreateCertificationRequestDTO was null or undefined when calling create.');
            }
            const localVarPath = `/api/certification-request`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof iCreateCertificationRequestDTO !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(iCreateCertificationRequestDTO !== undefined ? iCreateCertificationRequestDTO : {}) : (iCreateCertificationRequestDTO || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling get.');
            }
            const localVarPath = `/api/certification-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/certification-request`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCertificate: async (certificateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateId' is not null or undefined
            if (certificateId === null || certificateId === undefined) {
                throw new RequiredError('certificateId','Required parameter certificateId was null or undefined when calling getByCertificate.');
            }
            const localVarPath = `/api/certification-request/{certificateId}`
                .replace(`{${"certificateId"}}`, encodeURIComponent(String(certificateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling revoke.');
            }
            const localVarPath = `/api/certification-request/{id}/revoke`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CertificationRequestsClient - functional programming interface
 * @export
 */
export const CertificationRequestsClientFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approve(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISuccessResponseDTO>> {
            const localVarAxiosArgs = await CertificationRequestsClientAxiosParamCreator(configuration).approve(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ICreateCertificationRequestDTO} iCreateCertificationRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(iCreateCertificationRequestDTO: ICreateCertificationRequestDTO, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICertificationRequestDTO>> {
            const localVarAxiosArgs = await CertificationRequestsClientAxiosParamCreator(configuration).create(iCreateCertificationRequestDTO, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICertificationRequestDTO>> {
            const localVarAxiosArgs = await CertificationRequestsClientAxiosParamCreator(configuration).get(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ICertificationRequestDTO>>> {
            const localVarAxiosArgs = await CertificationRequestsClientAxiosParamCreator(configuration).getAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCertificate(certificateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICertificationRequestDTO>> {
            const localVarAxiosArgs = await CertificationRequestsClientAxiosParamCreator(configuration).getByCertificate(certificateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revoke(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISuccessResponseDTO>> {
            const localVarAxiosArgs = await CertificationRequestsClientAxiosParamCreator(configuration).revoke(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CertificationRequestsClient - factory interface
 * @export
 */
export const CertificationRequestsClientFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve(id: number, options?: any): AxiosPromise<ISuccessResponseDTO> {
            return CertificationRequestsClientFp(configuration).approve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICreateCertificationRequestDTO} iCreateCertificationRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(iCreateCertificationRequestDTO: ICreateCertificationRequestDTO, options?: any): AxiosPromise<ICertificationRequestDTO> {
            return CertificationRequestsClientFp(configuration).create(iCreateCertificationRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: any): AxiosPromise<ICertificationRequestDTO> {
            return CertificationRequestsClientFp(configuration).get(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): AxiosPromise<Array<ICertificationRequestDTO>> {
            return CertificationRequestsClientFp(configuration).getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} certificateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCertificate(certificateId: number, options?: any): AxiosPromise<ICertificationRequestDTO> {
            return CertificationRequestsClientFp(configuration).getByCertificate(certificateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revoke(id: number, options?: any): AxiosPromise<ISuccessResponseDTO> {
            return CertificationRequestsClientFp(configuration).revoke(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CertificationRequestsClient - object-oriented interface
 * @export
 * @class CertificationRequestsClient
 * @extends {BaseAPI}
 */
export class CertificationRequestsClient extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationRequestsClient
     */
    public approve(id: number, options?: any) {
        return CertificationRequestsClientFp(this.configuration).approve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ICreateCertificationRequestDTO} iCreateCertificationRequestDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationRequestsClient
     */
    public create(iCreateCertificationRequestDTO: ICreateCertificationRequestDTO, options?: any) {
        return CertificationRequestsClientFp(this.configuration).create(iCreateCertificationRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationRequestsClient
     */
    public get(id: number, options?: any) {
        return CertificationRequestsClientFp(this.configuration).get(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationRequestsClient
     */
    public getAll(options?: any) {
        return CertificationRequestsClientFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} certificateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationRequestsClient
     */
    public getByCertificate(certificateId: number, options?: any) {
        return CertificationRequestsClientFp(this.configuration).getByCertificate(certificateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationRequestsClient
     */
    public revoke(id: number, options?: any) {
        return CertificationRequestsClientFp(this.configuration).revoke(id, options).then((request) => request(this.axios, this.basePath));
    }

}


